generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  name                String?
  role                UserRole        @default(USER)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  created_by          String?
  deleted_at          DateTime?
  deleted_by          String?
  is_deleted          Boolean         @default(false)
  updated_by          String?
  project_memberships ProjectMember[]
  owned_projects      Project[]

  @@index([email])
  @@index([role])
  @@index([created_at])
  @@index([is_deleted])
  @@map("users")
}

model LogEntry {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  level          LogLevel
  correlation_id String
  message        String
  metadata       Json?
  created_at     DateTime @default(now())

  @@index([timestamp])
  @@index([correlation_id])
  @@index([level])
  @@map("log_entries")
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus   @default(DRAFT)
  owner_id    String?
  is_deleted  Boolean         @default(false)
  created_at  DateTime        @default(now())
  created_by  String?
  updated_at  DateTime        @updatedAt
  updated_by  String?
  deleted_at  DateTime?
  deleted_by  String?
  
  // Relations
  owner       User?           @relation(fields: [owner_id], references: [id])
  members     ProjectMember[]
  folders     Folder[]      // Project can have many folders
  files       File[]        // Project can have many files
  assets      Asset[]       // Project can have many assets

  @@index([owner_id])
  @@index([status])
  @@index([created_at])
  @@index([is_deleted])
  @@map("projects")
}

model ProjectMember {
  id         String      @id @default(uuid())
  project_id String
  user_id    String
  role       ProjectRole @default(MEMBER)
  joined_at  DateTime    @default(now())
  project    Project     @relation(fields: [project_id], references: [id])
  user       User        @relation(fields: [user_id], references: [id])

  @@unique([project_id, user_id])
  @@index([user_id])
  @@map("project_members")
}

model Folder {
  id          String   @id @default(uuid())
  name        String   
  description String?
  color       String?   // For UI theming
  is_default  Boolean  @default(false) // System folders can't be deleted
  project_id  String   // Required for project-scoped folders
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  project     Project  @relation(fields: [project_id], references: [id])
  files       File[]
  
  @@unique([name, project_id]) // Names unique within project only
  @@index([project_id])
  @@index([is_deleted])
  @@index([name])
  @@map("folders")
}

model File {
  id             String      @id @default(uuid())
  filename       String
  original_name  String
  mimetype       String
  size           Int
  blob_url       String
  container_name String
  blob_name      String
  file_type      FileType    @default(DOCUMENT)
  asset_id       String?
  is_deleted     Boolean     @default(false)
  created_at     DateTime    @default(now())
  created_by     String?
  updated_at     DateTime    @updatedAt
  updated_by     String?
  deleted_at     DateTime?
  deleted_by     String?
  folder_id      String?
  project_id     String?
  folder         Folder?     @relation(fields: [folder_id], references: [id])
  project        Project?    @relation(fields: [project_id], references: [id])
  asset          Asset?      @relation(fields: [asset_id], references: [id])
  import_jobs    ImportJob[]

  @@index([project_id])
  @@index([folder_id])
  @@index([asset_id])
  @@index([created_at])
  @@index([is_deleted])
  @@map("files")
}

model Asset {
  id                             String         @id @default(uuid())
  assetTag                       String
  name                           String
  is_deleted                     Boolean        @default(false)
  created_at                     DateTime       @default(now())
  updated_at                     DateTime       @updatedAt
  location                       String?
  manufacturer                   String?
  modelNumber                    String?
  projectId                      String?
  serialNumber                   String?
  status                         AssetStatus    @default(ACTIVE)
  amperage                       Decimal?       @db.Decimal(10, 2)
  annualMaintenanceCost          Decimal?       @db.Decimal(12, 2)
  area                           String?
  assetCategory                  String?
  assetType                      String?
  btuRating                      Int?
  buildingName                   String?
  catalogItemId                  String?
  catalogName                    String?
  currentBookValue               Decimal?       @db.Decimal(12, 2)
  dailyOperatingHours            Decimal?       @db.Decimal(4, 2)
  description                    String?
  equipmentSize                  String?
  estimatedAnnualKwh             Decimal?       @db.Decimal(12, 2)
  estimatedAnnualOperatingCost   Decimal?       @db.Decimal(12, 2)
  expectedLifetime               Int?
  floor                          String?
  installDate                    DateTime?
  installationCost               Decimal?       @db.Decimal(12, 2)
  manufactureDate                DateTime?
  motorHp                        Decimal?       @db.Decimal(10, 2)
  operationsSystem               String?
  phase                          Int?
  purchaseCost                   Decimal?       @db.Decimal(12, 2)
  quantity                       Int?
  ratedPowerKw                   Decimal?       @db.Decimal(10, 3)
  roomNumber                     String?
  serviceLife                    Int?
  size                           String?
  squareFeet                     Decimal?       @db.Decimal(10, 2)
  systemCategory                 String?
  totalCostOfOwnership           Decimal?       @db.Decimal(12, 2)
  trade                          String?
  unit                           String?
  voltage                        Int?
  weight                         Decimal?       @db.Decimal(10, 2)
  actualPowerKw                  Decimal?       @db.Decimal(10, 3)
  annualCarbonEmissions          Decimal?       @db.Decimal(12, 2)
  annualGasConsumption           Decimal?       @db.Decimal(12, 2)
  annualOperatingDays            Int?
  assetCategoryName              String?
  assetLocation                  String?
  assetSizeRounded               String?
  beltQuantity                   Int?
  beltSize                       String?
  classId                        String?
  customerName                   String?
  depreciationMethod             String?
  disposalCost                   Decimal?       @db.Decimal(12, 2)
  drawingAbbreviation            String?
  energyEfficiencyRating         String?
  energyEfficiencyValue          Decimal?       @db.Decimal(10, 2)
  equipNameId                    String?
  equipServedBy                  String?
  estimatedAnnualElectricityCost Decimal?       @db.Decimal(12, 2)
  estimatedAnnualGasCost         Decimal?       @db.Decimal(12, 2)
  estimatedOperatingHours        Int?
  estimatedReplacementDate       DateTime?
  filterQuantity                 Int?
  filterSize                     String?
  filterType                     String?
  floorName                      String?
  gasConsumptionRate             Decimal?       @db.Decimal(10, 3)
  idUnit                         String?
  industryServiceLife            Int?
  legacyBranchId                 String?
  legacyClientSiteEquipmentName  String?
  legacyClientSiteEquipmentRn    String?
  legacyInternalAssetId          String?
  legacyUsAssetId                String?
  legacyUseAssetId               String?
  loadFactor                     Decimal?       @db.Decimal(3, 2)
  note1                          String?
  note1Subject                   String?
  note2                          String?
  note2Subject                   String?
  note3                          String?
  note3Subject                   String?
  note4                          String?
  note4Subject                   String?
  note5                          String?
  note5Subject                   String?
  note6                          String?
  note6Subject                   String?
  notes                          String?
  numberOfCircuits               Int?
  observedRemainingLife          Int?
  overrideElectricityRate        Decimal?       @db.Decimal(6, 4)
  overrideGasRate                Decimal?       @db.Decimal(6, 4)
  ownerId                        String?
  peakDemandKw                   Decimal?       @db.Decimal(10, 3)
  powerFactor                    Decimal?       @db.Decimal(3, 2)
  preconSystem                   String?
  preconTag                      String?
  propertyName                   String?
  propertyZoneServed             String?
  ratingName                     String?
  ratingValue                    String?
  refrigerant                    String?
  refrigerantDefaultDescription  String?
  refrigerantDescription         String?
  refrigerantQuantity            Decimal?       @db.Decimal(10, 2)
  returnFanMotorSize             String?
  salvageValue                   Decimal?       @db.Decimal(12, 2)
  serviceId                      String?
  subSystemClass                 String?
  subSystemClassification        String?
  subSystemId                    String?
  subSystemType                  String?
  supplyFanMotorSize             String?
  systemTypeId                   String?
  title                          String?
  totalAnnualEnergyCost          Decimal?       @db.Decimal(12, 2)
  type                           String?
  useOverrideRates               Boolean        @default(false)
  vendor                         String?
  vendorWebsite                  String?
  verified                       Boolean        @default(false)
  warrantyExpirationDate         DateTime?
  xCoordinate                    Decimal?       @db.Decimal(10, 6)
  yCoordinate                    Decimal?       @db.Decimal(10, 6)
  condition                      AssetCondition @default(GOOD)
  project                        Project?       @relation(fields: [projectId], references: [id])
  files                          File[]

  @@index([assetTag])
  @@index([status])
  @@index([projectId])
  @@index([assetCategory])
  @@index([assetType])
  @@index([trade])
  @@index([buildingName])
  @@index([floor])
  @@index([installDate])
  @@index([created_at])
  @@index([is_deleted])
  @@map("assets")
}

model ImportJob {
  id             String         @id @default(uuid())
  file_id        String
  status         JobStatus      @default(PENDING)
  total_rows     Int?
  processed_rows Int            @default(0)
  error_rows     Int            @default(0)
  errors         Json           @default("[]")
  started_at     DateTime       @default(now())
  completed_at   DateTime?
  created_by     String?
  file           File           @relation(fields: [file_id], references: [id])
  staging_assets StagingAsset[]

  @@index([status])
  @@index([started_at])
  @@index([file_id])
  @@map("import_jobs")
}

model StagingAsset {
  id                String    @id @default(uuid())
  import_job_id     String
  row_number        Int
  raw_data          Json
  mapped_data       Json
  validation_errors Json?
  is_valid          Boolean   @default(true)
  will_import       Boolean   @default(true)
  created_at        DateTime  @default(now())
  import_job        ImportJob @relation(fields: [import_job_id], references: [id], onDelete: Cascade)

  @@index([import_job_id])
  @@index([is_valid])
  @@index([will_import])
  @@map("staging_assets")
}

model PipelineRule {
  id          String        @id @default(uuid())
  name        String
  description String?
  phase       PipelinePhase
  type        RuleType
  target      String
  config      Json
  priority    Int           @default(100)
  is_active   Boolean       @default(true)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  created_by  String?
  updated_by  String?

  @@index([phase, is_active, priority])
  @@index([type, target])
  @@index([is_active])
  @@map("pipeline_rules")
}

model AssetColumnAlias {
  id          String   @id @default(uuid())
  asset_field String
  csv_alias   String   @unique
  confidence  Decimal  @default(1.0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?

  @@index([asset_field])
  @@index([csv_alias])
  @@map("asset_column_aliases")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
  DISPOSED
  INACTIVE
  LOST
  STOLEN
}

enum AssetCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
  FOR_REPAIR
  FOR_DISPOSAL
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  STAGED
  APPROVED
}

enum PipelinePhase {
  EXTRACT
  VALIDATE
  CLEAN
  TRANSFORM
  MAP
  LOAD
}

enum RuleType {
  ENCODING_DETECTOR
  COLUMN_MAPPER
  DELIMITER_DETECTOR
  HEADER_VALIDATOR
  REQUIRED_FIELD
  DATA_TYPE_CHECK
  RANGE_VALIDATOR
  FORMAT_VALIDATOR
  TRIM
  REGEX_REPLACE
  EXACT_REPLACE
  REMOVE_DUPLICATES
  TO_UPPERCASE
  TO_LOWERCASE
  TITLE_CASE
  DATE_FORMAT
  NUMERIC_FORMAT
  CALCULATE_FIELD
  FIELD_MAPPING
  ENUM_MAPPING
  REFERENCE_LOOKUP
  DEFAULT_VALUE
  CONFLICT_RESOLUTION
  BATCH_SIZE
  TRANSACTION_BOUNDARY
  ROLLBACK_STRATEGY
}

enum FileType {
  DOCUMENT
  IMAGE
  PDF
  SPREADSHEET
  OTHER
}
