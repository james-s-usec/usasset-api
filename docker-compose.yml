version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: usasset-postgres
    environment:
      POSTGRES_USER: dbadmin
      POSTGRES_PASSWORD: localpassword123
      POSTGRES_DB: usasset
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbadmin -d usasset"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (mirrors Azure Container App)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: usasset-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://dbadmin:localpassword123@postgres:5432/usasset
      NODE_ENV: development
      PORT: 3000
      CORS_ORIGIN: http://localhost:5173  # Must match frontend URL
      JWT_SECRET: local-jwt-secret-for-dev
      LOG_TO_FILE: "false"
      RUN_SEED: ${RUN_SEED:-false}  # Set to true to run seed on startup
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # No volumes for production mode - everything is in the container
    command: node dist/src/main.js

  # Frontend (mirrors Azure Container App)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      args:
        VITE_API_URL: http://localhost:3000  # Build-time variable for API URL
    container_name: usasset-frontend
    depends_on:
      - backend
    ports:
      - "5173:80"  # Map to 5173 to match dev server port
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    # No volumes for production mode - static files served by nginx

volumes:
  postgres_data: